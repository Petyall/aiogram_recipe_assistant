import logging

from config import settings
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from pymongo import MongoClient


logging.basicConfig(level=logging.INFO)

# Replace xxx with your bot token
TOKEN = settings.API_TOKEN

# Initialize bot and dispatcher
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# Initialize MongoDB client
MONGODB_URL = settings.MONGODB_URL
client = MongoClient(MONGODB_URL)
db = client['cookie_bot']
collection = db.receipts


class AddArticle(StatesGroup):
    waiting_for_title = State()
    waiting_for_text = State()

@dp.message_handler(Command("start"))
async def start(message: types.Message):
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç–∞–¥–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏
    await message.answer("–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏, –∂–º–∏ –∫–Ω–æ–ø–∫—É menu –Ω–∞ —ç–∫—Ä–∞–Ω–µ.\n–¢–∞–º –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, –Ω–æ –Ω–∞–≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –∏—Ö –∑–¥–µ—Å—å!\n/all - –í—ã–≤–æ–¥ –≤—Å–µ—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ ü¶ë\n/get_receipt - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é üîé\n/add- –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç ‚úîÔ∏è")

@dp.message_handler(Command("add"))
async def add_article(message: types.Message):
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç–∞–¥–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏
    await message.answer("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞, —á—Ç–æ–±—ã —è —Å–º–æ–≥ –µ–≥–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å")
    await AddArticle.waiting_for_title.set()

# –° –ø–æ–º–æ—â—å—é –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ message_handler –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–±–∞–≤–∏—Ç—Å—è –∫ —Å—Ç–∞–¥–∏–∏ waiting_for_title
@dp.message_handler(state=AddArticle.waiting_for_title)
async def process_title(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
    async with state.proxy() as data:
        data['title'] = message.text.lower()
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç–∞–¥–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –ø—É–Ω–∫—Ç—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞ '{data['title']}'")
    await AddArticle.waiting_for_text.set()

# –° –ø–æ–º–æ—â—å—é –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ message_handler –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–±–∞–≤–∏—Ç—Å—è –∫ —Å—Ç–∞–¥–∏–∏ waiting_for_text
@dp.message_handler(state=AddArticle.waiting_for_text)
async def process_text(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏
    async with state.proxy() as data:
        data['text'] = message.text
        db.receipts.insert_one({'user_id': message.from_user.id, 'title': data['title'], 'text': data['text']})
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        response = f"‚úÖ–†–µ—Ü–µ–ø—Ç '{data['title']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!‚úÖ\n\n{data['text']}"
        await message.answer(response)
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.finish()


class GetReceiptForm(StatesGroup):
    title = State()

@dp.message_handler(commands='get_receipt')
async def cmd_get_receipt(message: types.Message):
    await GetReceiptForm.title.set()
    await message.reply("–ß—Ç–æ–±—ã —è –Ω–∞—à–µ–ª —Ä–µ—Ü–µ–ø—Ç, –Ω–∞–ø–∏—à–∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µüïµüèª")

@dp.message_handler(state=GetReceiptForm.title)
async def process_get_receipt(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['title'] = message.text.lower()
        # –ø—Ä–æ—Ö–æ–¥–∏–º –∫—É—Ä—Å–æ—Ä –≤ —Ü–∏–∫–ª–µ –∏ –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ –ø–æ–ª–µ–π 'title' –∏ 'text'
        receipts = db.receipts.find_one({'title': data['title']})
        if receipts:
            await message.reply('–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª –¥–ª—è —Ç–µ–±—èüòä')
            # response = '–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª –¥–ª—è —Ç–µ–±—èüòä\n'
            response = f"{receipts['title'].upper()}:\n\n{receipts['text']}"
        else:
            response = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤üòî\n–ù–æ —Ç—ã –º–æ–∂–µ—à—å —Å—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º(–æ–π) –∏ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ!'
        
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(response)

    # –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    await state.finish()

@dp.message_handler(commands='all')
async def cmd_get_receipt(message: types.Message):
    await message.reply(f"–ü–æ–Ω—è–ª, –≤—ã–≤–æ–∂—É –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞—éüòä")
    response = ""
    for receipt in collection.find():
        response += f"üìñ{receipt['title'].upper()}üìñ\n\n"
        # await message.answer(f"üìñ–†–ï–¶–ï–ü–¢ {receipt['title'].upper()}üìñ\n{receipt['text']}")
    await message.answer(response)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)



# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î
# post = {"author": "petyal",
#         "text": "My first blog post!"
# }
# collection_id = collection.insert_one(post).inserted_id
# collection_id

# –í—ã–≤–æ–¥ –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î
# for i in collection.find():
#     print(i)
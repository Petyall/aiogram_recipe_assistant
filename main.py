from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bson import ObjectId
from pymongo import MongoClient
from logging import basicConfig, INFO

from config import settings


basicConfig(level=INFO)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞
TOKEN = settings.API_TOKEN
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ MongoDB
MONGODB_URL = settings.MONGODB_URL
client = MongoClient(MONGODB_URL)
db = client['cookie_bot']
collection = db.receipts

# –ö–ª–∞—Å—Å –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ä–µ—Ü–µ–ø—Ç–æ–≤
class AddReceipt(StatesGroup):
    waiting_for_title = State()
    waiting_for_text = State()


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(Command("start"))
async def start(message: types.Message):
    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏, –∂–º–∏ –∫–Ω–æ–ø–∫—É menu –Ω–∞ —ç–∫—Ä–∞–Ω–µ.\n–¢–∞–º –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, –Ω–æ –Ω–∞–≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –∏—Ö –∑–¥–µ—Å—å!\n/all - –í—ã–≤–æ–¥ –≤—Å–µ—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ ü¶ë\n/get_receipt - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é üîé\n/add- –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç ‚úîÔ∏è")


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /add
@dp.message_handler(Command("add"))
async def add_article(message: types.Message):
    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞, —á—Ç–æ–±—ã —è —Å–º–æ–≥ –µ–≥–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å")
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–∞–¥–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await AddReceipt.waiting_for_title.set()


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è waiting_for_title
@dp.message_handler(state=AddReceipt.waiting_for_title)
async def process_title(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    async with state.proxy() as data:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data['title'] = message.text.lower()
    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –ø—É–Ω–∫—Ç—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞ '{data['title']}'")
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–∞–¥–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await AddReceipt.waiting_for_text.set()


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è waiting_for_text
@dp.message_handler(state=AddReceipt.waiting_for_text)
async def process_text(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    async with state.proxy() as data:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data['text'] = message.text
        # –°–æ—Ö—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –ë–î
        db.receipts.insert_one({'user_id': message.from_user.id, 'title': data['title'], 'text': data['text']})
        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(f"‚úÖ–†–µ—Ü–µ–ø—Ç '{data['title']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!‚úÖ\n\n{data['text']}")
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏ —Å–±—Ä–æ—Å –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.finish()


# –ö–ª–∞—Å—Å –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å –ø–æ–∏—Å–∫–æ–º —Ä–µ—Ü–µ–ø—Ç–æ–≤
class GetReceiptForm(StatesGroup):
    title = State()


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /get_receipt
@dp.message_handler(commands='get_receipt')
async def cmd_get_receipt(message: types.Message):
    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.reply("–ß—Ç–æ–±—ã —è –Ω–∞—à–µ–ª —Ä–µ—Ü–µ–ø—Ç, –Ω–∞–ø–∏—à–∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µüïµüèª")
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–∞–¥–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await GetReceiptForm.title.set()


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è title
@dp.message_handler(state=GetReceiptForm.title)
async def process_get_receipt(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    async with state.proxy() as data:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data['title'] = message.text.lower()
        # –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –ë–î
        receipts = db.receipts.find_one({'title': data['title']})
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ —Ä–µ—Ü–µ–ø—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if receipts:
            # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.reply('–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª –¥–ª—è —Ç–µ–±—èüòä')
            response = f"{receipts['title'].upper()}:\n\n{receipts['text']}"
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ —Ä–µ—Ü–µ–ø—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        else:
            # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            response = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤üòî\n–ù–æ —Ç—ã –º–æ–∂–µ—à—å —Å—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º(–æ–π) –∏ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ!'
        # –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(response)
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏ —Å–±—Ä–æ—Å –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.finish()


# # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /all
# @dp.message_handler(commands='all')
# async def cmd_all(message: types.Message):
#     # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#     await message.reply(f"–ü–æ–Ω—è–ª, –≤—ã–≤–æ–∂—É –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞—éüòä")
#     response = ""
#     # –í—ã–≤–æ–¥ –≤—Å–µ—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤
#     for receipt in collection.find():
#         response += f"üìñ{receipt['title'].upper()}üìñ\n\n"
#     # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#     await message.answer(response)


# @dp.message_handler(commands='b1')
# async def button1(message: types.Message):
#     markup = InlineKeyboardMarkup()
#     button = InlineKeyboardButton(text='pip', callback_data='butt_id')
#     markup.add(button)

#     await bot.send_message(message.chat.id, 'message text', reply_markup=markup)

# @dp.callback_query_handler(lambda c: c.data == 'butt_id')
# async def to_query(call: types.callback_query):
#     await bot.answer_callback_query(call.id)
#     await bot.send_message(call.message.chat.id, 'button pressed')


# @dp.message_handler(commands='b1')
# async def button1(message: types.Message):
#     markup = InlineKeyboardMarkup()
#     for receipt in collection.find():
#         button = InlineKeyboardButton(text=f"üìñ{receipt['title'].upper()}üìñ", callback_data='butt_id')
#         markup.add(button)

#     await bot.send_message(message.chat.id, '–ü–æ–Ω—è–ª, –≤—ã–≤–æ–∂—É –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞—éüòä', reply_markup=markup)

# @dp.callback_query_handler(lambda c: c.data == 'butt_id')
# async def to_query(call: types.callback_query):
#     await bot.answer_callback_query(call.id)
#     await bot.send_message(call.message.chat.id, 'button pressed')













# from aiogram.utils.callback_data import CallbackData
# from bson.objectid import ObjectId

# button_callback = CallbackData('receipt', 'receipt_id')

# @dp.message_handler(commands='b1')
# async def button1(message: types.Message):
    
#     markup = InlineKeyboardMarkup()
#     for receipt in collection.find():
#         markup.add(InlineKeyboardButton(text=f"üìñ{receipt['title'].upper()}üìñ", callback_data=str(receipt['_id'])))

#     await bot.send_message(message.chat.id, '–ü–æ–Ω—è–ª, –≤—ã–≤–æ–∂—É –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞—éüòä', reply_markup=markup)


from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

@dp.message_handler(commands='all')
async def start_handler(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    
    for receipt in collection.find():
        button = InlineKeyboardButton(text=f"üìñ{receipt['title'].upper()}üìñ", callback_data=f"recipe_{receipt['_id']}")
        keyboard.add(button)
    
    await message.answer("–ü–æ–Ω—è–ª, –≤—ã–≤–æ–∂—É –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞—éüòä", reply_markup=keyboard)

@dp.callback_query_handler()
async def recipe_handler(call: types.callback_query):
    recipe_id = call.data.split("_")[1]
    recipe = db.receipts.find_one({"_id": ObjectId(recipe_id)})
    await bot.send_message(call.message.chat.id, f'üìñ{recipe["title"].upper()}üìñ\n\n{recipe["text"]}')



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
